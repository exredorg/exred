{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","exred/tests/app.lint-test.js","exred/tests/components/ember-ace.js","exred/tests/helpers/destroy-app.js","exred/tests/helpers/ember-basic-dropdown.js","exred/tests/helpers/ember-frost-core.js","exred/tests/helpers/ember-frost-core/frost-button.js","exred/tests/helpers/ember-frost-core/frost-select.js","exred/tests/helpers/ember-frost-core/frost-text.js","exred/tests/helpers/ember-frost-core/utils.js","exred/tests/helpers/ember-power-select.js","exred/tests/helpers/ember-prop-types.js","exred/tests/helpers/ember-simple-auth.js","exred/tests/helpers/module-for-acceptance.js","exred/tests/helpers/start-app.js","exred/tests/integration/components/diagram-node-test.js","exred/tests/integration/components/editor-flownav-test.js","exred/tests/integration/components/editor-flows-test.js","exred/tests/integration/components/editor-nodelist-test.js","exred/tests/integration/components/editor-sidetabs-test.js","exred/tests/integration/components/editor-toolbar-test.js","exred/tests/integration/components/x-config-tab-test.js","exred/tests/integration/components/x-config-tab/codeblock-test.js","exred/tests/integration/components/x-config-tab/filepicker-test.js","exred/tests/integration/components/x-config-tab/list-multiselect-test.js","exred/tests/integration/components/x-config-tab/number-test.js","exred/tests/integration/components/x-config-tab/select-test.js","exred/tests/integration/components/x-config-tab/string-test.js","exred/tests/integration/components/x-debug-item-test.js","exred/tests/integration/components/x-debug-tab-test.js","exred/tests/integration/components/x-editor-test.js","exred/tests/integration/components/x-info-tab-test.js","exred/tests/integration/components/x-json-test.js","exred/tests/integration/components/x-json2html-test.js","exred/tests/integration/components/x-jsplumb-test.js","exred/tests/test-helper.js","exred/tests/tests.lint-test.js","exred/tests/unit/adapters/application-test.js","exred/tests/unit/controllers/app/index-test.js","exred/tests/unit/initializers/debug-helpers-test.js","exred/tests/unit/models/connection-test.js","exred/tests/unit/models/flow-test.js","exred/tests/unit/models/node-test.js","exred/tests/unit/models/service-test.js","exred/tests/unit/routes/app-test.js","exred/tests/unit/routes/app/index-test.js","exred/tests/unit/routes/application-test.js","exred/tests/unit/routes/auth-test.js","exred/tests/unit/routes/auth/login-test.js","exred/tests/unit/routes/auth/register-test.js","exred/tests/unit/routes/index-test.js","exred/tests/unit/serializers/application-test.js","exred/tests/unit/serializers/node-test.js","exred/tests/unit/services/global-state-test.js","exred/tests/unit/services/phoenix-channels-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('exred/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/diagram-node.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/diagram-node.js should pass ESLint\\n\\n87:11 - \\'leftEndpoint\\' is assigned a value but never used. (no-unused-vars)\\n88:11 - \\'rightEndpoint\\' is assigned a value but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/editor-flownav.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/editor-flownav.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/editor-flows.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/editor-flows.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/editor-nodelist.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/editor-nodelist.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/editor-sidetabs.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/editor-sidetabs.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/editor-toolbar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/editor-toolbar.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-config-tab.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-config-tab.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-config-tab/codeblock.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-config-tab/codeblock.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-config-tab/filepicker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-config-tab/filepicker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-config-tab/list-multiselect.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/x-config-tab/list-multiselect.js should pass ESLint\\n\\n10:9 - \\'items\\' is assigned a value but never used. (no-unused-vars)\\n26:76 - Unnecessary semicolon. (no-extra-semi)');\n  });\n\n  QUnit.test('components/x-config-tab/number.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-config-tab/number.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-config-tab/select.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-config-tab/select.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-config-tab/string.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-config-tab/string.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-debug-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-debug-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-debug-tab.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-debug-tab.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-editor.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-editor.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-info-tab.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/x-info-tab.js should pass ESLint\\n\\n9:9 - \\'data\\' is assigned a value but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/x-json.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/x-json.js should pass ESLint\\n\\n11:7 - Unexpected newline between function and ( of function call. (no-unexpected-multiline)');\n  });\n\n  QUnit.test('components/x-json2html.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-json2html.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-jsplumb.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/x-jsplumb.js should pass ESLint\\n\\n86:9 - \\'filterLabelConnOverlay\\' is assigned a value but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/app/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/app/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/debug-helpers.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/debug-helpers.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/connection.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/connection.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/flow.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/flow.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/node.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/node.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/service.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/app/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/app/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/auth.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/auth.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/auth/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/auth/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/auth/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/auth/register.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/node.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/node.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/global-state.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/global-state.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/phoenix-channels.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/phoenix-channels.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('session-stores/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'session-stores/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transitions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transitions.js should pass ESLint\\n\\n');\n  });\n});","define('exred/tests/components/ember-ace', ['exports', 'ember-ace/test-support/components/ember-ace'], function (exports, _emberAce) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _emberAce.default;\n    }\n  });\n});","define('exred/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('exred/tests/helpers/ember-basic-dropdown', ['exports', 'ember-basic-dropdown/test-support/helpers', 'ember-native-dom-helpers'], function (exports, _helpers, _emberNativeDomHelpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.nativeClick = exports.fireKeydown = exports.tapTrigger = exports.clickTrigger = exports.nativeTap = undefined;\n  Object.defineProperty(exports, 'nativeTap', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeTap;\n    }\n  });\n  Object.defineProperty(exports, 'clickTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.clickTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'tapTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.tapTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'fireKeydown', {\n    enumerable: true,\n    get: function () {\n      return _helpers.fireKeydown;\n    }\n  });\n  exports.default = _helpers.default;\n  var nativeClick = exports.nativeClick = _emberNativeDomHelpers.click;\n});","define('exred/tests/helpers/ember-frost-core', ['exports', 'ember-hook', 'exred/tests/helpers/ember-frost-core/frost-button', 'exred/tests/helpers/ember-frost-core/frost-select', 'exred/tests/helpers/ember-frost-core/frost-text'], function (exports, _emberHook, _frostButton, _frostSelect, _frostText) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.findTextInputs = exports.findButtons = exports.filterSelect = exports.expectTextInputWithState = exports.expectSelectWithState = exports.expectButtonWithState = undefined;\n  exports.click = click;\n  exports.fillIn = fillIn;\n  exports.focusout = focusout;\n  var $ = Ember.$,\n      typeOf = Ember.typeOf;\n\n\n  var assign = Object.assign || Ember.assign || Ember.merge; // eslint-disable-line\n\n  /**\n   * Click on element\n   * @param {jQuery|String} element - name of Ember hook or jQuery instance\n   */\n  function click(element) {\n    var $element = typeOf(element) === 'string' ? (0, _emberHook.$hook)(element) : element;\n    $element.click();\n  }\n\n  /**\n   * Fill in an element\n   * @param {jQuery|String} element - name of Ember hook or jQuery instance\n   * @param {String} value - value to fill in\n   */\n  function fillIn(element, value) {\n    var $element = typeOf(element) === 'string' ? (0, _emberHook.$hook)(element) : element;\n    $element.val(value).trigger('input');\n  }\n\n  /**\n   * Remove focus from element\n   * @param {jQuery|String} element - name of Ember hook or jQuery instance\n   */\n  function focusout(element) {\n    var $element = typeOf(element) === 'string' ? (0, _emberHook.$hook)(element) : element;\n    $element.focusout();\n  }\n\n  // TODO: Remove these as part of next major release, expecting consumers to\n  // import {expectWithState} from 'dummy/tests/helpers/ember-frost-core/frost-select'\n  // instead so we don't have to manange this import/re-export madness.\n  var expectButtonWithState = exports.expectButtonWithState = _frostButton.expectWithState;\n  var expectSelectWithState = exports.expectSelectWithState = _frostSelect.expectWithState;\n  var expectTextInputWithState = exports.expectTextInputWithState = _frostText.expectWithState;\n  var filterSelect = exports.filterSelect = _frostSelect.filter;\n  var findButtons = exports.findButtons = _frostButton.find;\n  var findTextInputs = exports.findTextInputs = _frostText.find;\n\n  exports.default = {\n    click: click,\n    expectButtonWithState: expectButtonWithState,\n    expectSelectWithState: expectSelectWithState,\n    expectTextInputWithState: expectTextInputWithState,\n    fillIn: fillIn,\n    findButtons: findButtons,\n    findTextInputs: findTextInputs,\n    focusout: focusout\n  };\n});","define('exred/tests/helpers/ember-frost-core/frost-button', ['exports', 'chai', 'ember-hook', 'exred/tests/helpers/ember-frost-core/utils'], function (exports, _chai, _emberHook, _utils) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.expectWithState = expectWithState;\n  exports.find = find;\n  var $ = Ember.$,\n      typeOf = Ember.typeOf;\n\n\n  var assign = Object.assign || Ember.assign || Ember.merge; // eslint-disable-line\n\n  /**\n   * Verify button exists with expected state\n   * @param {jQuery|String} button - name of Ember hook or jQuery instance\n   * @param {FrostButtonState} state - expected button state\n   */\n  function expectWithState(button, state) {\n    var defaults = {\n      disabled: false,\n      pack: 'frost'\n    };\n\n    var $button = typeOf(button) === 'string' ? (0, _emberHook.$hook)(button) : button;\n    state = assign(defaults, state);\n\n    (0, _utils.expectDisabledState)($button, state.disabled, 'button');\n\n    if (state.icon && state.pack) {\n      (0, _chai.expect)($button.find('.frost-icon-' + state.pack + '-' + state.icon), 'button has expected icon').to.have.length(1);\n    }\n\n    if (state.text) {\n      (0, _chai.expect)($button.find('.text:not(.icon-text)').text().trim(), 'button has expected text').to.equal(state.text);\n    }\n  }\n\n  /**\n   * Get list of buttons\n   * @returns {jQuery} buttons\n   */\n  function find() {\n    return $('.frost-button');\n  }\n});","define('exred/tests/helpers/ember-frost-core/frost-select', ['exports', 'chai', 'ember-hook', 'ember-test-helpers/wait', 'exred/tests/helpers/ember-frost-core/utils'], function (exports, _chai, _emberHook, _wait, _utils) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.expectWithState = expectWithState;\n  exports.filter = filter;\n  exports.open = open;\n  exports.close = close;\n  exports.selectItemAtIndex = selectItemAtIndex;\n  var $ = Ember.$,\n      RSVP = Ember.RSVP,\n      run = Ember.run,\n      typeOf = Ember.typeOf;\n\n\n  var assign = Object.assign || Ember.assign || Ember.merge; // eslint-disable-line\n\n  /* eslint-disable complexity */\n  /**\n   * Verify select exists with expected state\n   * @param {jQuery|String} select - name of Ember hook or jQuery instance\n   * @param {FrostSelectState} state - expected select state\n   */\n  function expectWithState(select, state) {\n    var defaults = {\n      disabled: false,\n      error: false,\n      opened: false,\n      tabIndex: 0,\n      text: ''\n    };\n\n    var $select = typeOf(select) === 'string' ? (0, _emberHook.$hook)(select) : select;\n    state = assign(defaults, state);\n\n    (0, _chai.expect)($select.hasClass('frost-select'), 'has frost-select class').to.equal(true);\n\n    (0, _utils.expectToggleClass)($select, 'frost-select-disabled', state.disabled);\n    (0, _utils.expectToggleClass)($select, 'frost-select-error', state.error);\n    (0, _utils.expectToggleClass)($select, 'frost-select-focused', state.focused);\n    (0, _utils.expectToggleClass)($select, 'frost-select-opened', state.opened);\n\n    (0, _chai.expect)($select.prop('tabindex'), 'has expected tab index').to.equal(state.disabled ? -1 : state.tabIndex);\n\n    if (state.focusedItem) {\n      (0, _chai.expect)($('.frost-select-list-item-focused .frost-select-list-item-text').data('text'), 'is focused on expected item').to.equal(state.focusedItem);\n    }\n\n    var $emptyMessage = $('.frost-select-dropdown-empty-msg');\n\n    if (state.items && state.items.length !== 0) {\n      var labels = $('.frost-select-dropdown li').toArray().map(function (element) {\n        return $(element).find('.frost-select-list-item-text').data('text');\n      });\n\n      (0, _chai.expect)(labels, 'has expected items').to.eql(state.items);\n      (0, _chai.expect)($emptyMessage, 'does not show empty message').to.have.length(0);\n\n      if (state.secondaryLabels) {\n        var secondaryLabels = $('.frost-select-dropdown li').toArray().map(function (element) {\n          return $(element).find('.frost-select-list-secondary-item-text').data('text');\n        });\n\n        (0, _chai.expect)(secondaryLabels, 'has expected items').to.eql(state.secondaryLabels);\n      }\n    } else if (state.opened) {\n      (0, _chai.expect)($emptyMessage, 'shows empty message').to.have.length(1);\n    }\n\n    (0, _chai.expect)($select.find('.frost-select-text').text().trim(), 'has expected text').to.equal(state.text);\n  }\n  /* eslint-disable complexity */\n\n  /**\n   * Filter frost-select\n   * @param {String} filter - filter to apply to select\n   */\n  function filter(filter) {\n    $(window).trigger('resize'); // For some reason we need to do this in Ember 2.3\n    $('.frost-select-dropdown .frost-text-input').val(filter).trigger('input');\n  }\n\n  /**\n   * Open frost-select dropdown\n   * @param {String} [hook='select'] - frost-select hook\n   * @returns {Promise} the resolved promise from ember-test-helpers/wait\n   */\n  function open() {\n    var hook = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'select';\n\n    // In a real browser when you click on the select with your mouse a\n    // focusin event is fired on the component. However when using jQuery's\n    // click() method the focusin is not fired so we are programitcally\n    // triggering that in this test.\n    (0, _emberHook.$hook)(hook).click().trigger('focusin');\n    return (0, _wait.default)();\n  }\n\n  /**\n   * Close frost-select dropdown\n   * @param {String} [hook='select'] - frost-select hook\n   * @returns {Promise} the resolved promise from ember-test-helpers/wait\n   */\n  function close() {\n    var hook = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'select';\n\n    (0, _emberHook.$hook)(hook).click().trigger('focusout');\n    return (0, _wait.default)();\n  }\n\n  /**\n   * Select item in select dropdown at given index\n   * NOTE: using done() instead of Promise based because promised based causes\n   * select to lose focus for some reason. This may have something to with with\n   * how mocha is handling done vs promise returns.\n   * @param {String} hook - frost-select hook\n   * @param {Number} index - index of item to select\n   * @param {Function} done - mocha done callback\n   */\n  function selectItemAtIndex(hook, index, done) {\n    (0, _emberHook.$hook)(hook + '-item', { index: index }).trigger('mousedown');\n    run.next(function () {\n      done();\n    });\n  }\n});","define('exred/tests/helpers/ember-frost-core/frost-text', ['exports', 'chai', 'ember-hook', 'exred/tests/helpers/ember-frost-core/utils'], function (exports, _chai, _emberHook, _utils) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.expectWithState = expectWithState;\n  exports.find = find;\n  var $ = Ember.$,\n      typeOf = Ember.typeOf;\n\n\n  var assign = Object.assign || Ember.assign || Ember.merge; // eslint-disable-line\n\n  /**\n   * Verify text input exists with expected state\n   * @param {jQuery|String} input - name of Ember hook or jQuery instance\n   * @param {FrostTextState} state - expected input state\n   */\n  function expectWithState(input, state) {\n    var defaults = {\n      align: 'left',\n      disabled: false,\n      error: false,\n      tabIndex: 0,\n      type: 'text'\n    };\n\n    var $input = typeOf(input) === 'string' ? (0, _emberHook.$hook)(input) : input;\n    state = assign(defaults, state);\n\n    (0, _chai.expect)($input.hasClass(state.align), 'input has correct text alignment').to.equal(true);\n\n    (0, _utils.expectDisabledState)($input, state.disabled, 'input');\n\n    (0, _chai.expect)($input.hasClass('error'), 'input ' + (state.error ? 'has' : 'does not have') + ' error class').to.equal(state.error);['placeholder', 'tabIndex', 'type'].forEach(function (key) {\n      if (state[key]) {\n        (0, _chai.expect)($input.prop(key), 'input as expected ' + key).to.equal(state[key]);\n      }\n    });\n\n    if (state.value) {\n      (0, _chai.expect)($input.val(), 'input has expected value').to.equal(state.value);\n    }\n  }\n\n  /**\n   * Get list of text inputs\n   * @returns {jQuery} text inputs\n   * @param {FrostTextState} state - find inputs with state\n   */\n  function find(state) {\n    var $inputs = $('.frost-text input');\n\n    if (typeOf(state) !== 'object') {\n      return $inputs;\n    }\n\n    return $inputs.filter(function (index, input) {\n      if ('disabled' in state && input.disabled !== state.disabled || 'type' in state && input.type !== state.type) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n});","define('exred/tests/helpers/ember-frost-core/utils', ['exports', 'chai'], function (exports, _chai) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.expectDisabledState = expectDisabledState;\n  exports.expectToggleClass = expectToggleClass;\n\n\n  /**\n   * Expect element to have disabled state\n   * @param {jQuery} $element - element\n   * @param {Boolean} disabled - disabled\n   * @param {String} [type='element'] - type of element\n   */\n  function expectDisabledState($element, disabled) {\n    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'element';\n\n    (0, _chai.expect)($element.is(':disabled'), type + ' is ' + (disabled ? 'disabled' : 'enabled')).to.equal(disabled);\n  }\n\n  /**\n   * Expect class on element depending on boolean state\n   * @param {jQuery} $element - element to check for class on\n   * @param {String} className - name of class\n   * @param {Boolean} state - whether or not class should be present\n   */\n  function expectToggleClass($element, className, state) {\n    if (state === undefined) {\n      return;\n    }\n\n    (0, _chai.expect)($element.hasClass(className), (state ? 'has' : 'does not have') + ' ' + className + ' class').to.equal(state);\n  }\n});","define('exred/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  exports.default = deprecatedRegisterHelpers;\n\n\n  function deprecateHelper(fn, name) {\n    return function () {\n      (true && !(false) && Ember.deprecate('DEPRECATED `import { ' + name + ' } from \\'../../tests/helpers/ember-power-select\\';` is deprecated. Please, replace it with `import { ' + name + ' } from \\'ember-power-select/test-support/helpers\\';`', false, { until: '1.11.0', id: 'ember-power-select-test-support-' + name }));\n\n      return fn.apply(undefined, arguments);\n    };\n  }\n\n  var findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  var nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  var nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  var triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  var typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  var clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  var nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  var touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  var selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, { until: '1.11.0', id: 'ember-power-select-test-support-register-helpers' }));\n\n    return (0, _helpers.default)();\n  }\n\n  exports.findContains = findContains;\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n  exports.selectChoose = selectChoose;\n});","define('exred/tests/helpers/ember-prop-types', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createComponent = createComponent;\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  var VERSION = Ember.VERSION;\n\n\n  /**\n   * Determine if we are on a version of Ember that includes Glimmer 2\n   * @returns {Boolean} whether or not we are on Glimmer 2\n   */\n  function isGlimmer2() {\n    var _VERSION$split = VERSION.split('.'),\n        _VERSION$split2 = _slicedToArray(_VERSION$split, 2),\n        major = _VERSION$split2[0],\n        minor = _VERSION$split2[1];\n\n    return parseInt(major) > 1 && parseInt(minor) > 9;\n  }\n\n  /**\n   * Programitcally instantiate instance of component class\n   * @param {Ember.Component} component - component class to instantiate\n   * @returns {Ember.Component} instance of component class\n   */\n  function createComponent(component) {\n    if (isGlimmer2()) {\n      return component.create({ renderer: {} });\n    }\n\n    return component.create();\n  }\n});","define('exred/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  var TEST_CONTAINER_KEY = 'authenticator:test'; /* global wait */\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n});","define('exred/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'exred/tests/helpers/start-app', 'exred/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('exred/tests/helpers/start-app', ['exports', 'exred/app', 'exred/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('exred/tests/integration/components/diagram-node-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('diagram-node', 'Integration | Component | diagram node', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"iioqA4DR\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"diagram-node\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"PkZ4abwi\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"diagram-node\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/editor-flownav-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('editor-flownav', 'Integration | Component | editor flownav', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"wxyVLLAH\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"editor-flownav\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"+anvpboV\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"editor-flownav\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/editor-flows-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('editor-flows', 'Integration | Component | editor flows', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"wcDFcw8z\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"editor-flows\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2bil6yjC\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"editor-flows\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/editor-nodelist-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('editor-nodelist', 'Integration | Component | editor nodelist', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"oUXl1Yit\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"editor-nodelist\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Q2CMb0pf\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"editor-nodelist\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/editor-sidetabs-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('editor-sidetabs', 'Integration | Component | editor sidetabs', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6rZBvubU\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"editor-sidetabs\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ahiPJzAY\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"editor-sidetabs\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/editor-toolbar-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('editor-toolbar', 'Integration | Component | editor toolbar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Ycwaq9Ld\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"editor-toolbar\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Z728iML1\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"editor-toolbar\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/x-config-tab-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-config-tab', 'Integration | Component | x config tab', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ZgDX6Wa7\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"x-config-tab\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"cHgKKfLo\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"x-config-tab\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/x-config-tab/codeblock-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-config-tab/codeblock', 'Integration | Component | x config tab/codeblock', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Gg9uWuZD\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"x-config-tab/codeblock\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Gv8xY72N\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"x-config-tab/codeblock\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/x-config-tab/filepicker-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-config-tab/filepicker', 'Integration | Component | x config tab/filepicker', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"XhH9LcCu\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"x-config-tab/filepicker\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"P7kUXd9W\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"x-config-tab/filepicker\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/x-config-tab/list-multiselect-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-config-tab/list-multiselect', 'Integration | Component | x config tab/list multiselect', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"8bl4lzS8\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"x-config-tab/list-multiselect\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ekCkTl4D\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"x-config-tab/list-multiselect\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/x-config-tab/number-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-config-tab/number', 'Integration | Component | x config tab/number', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"gHZoJzkQ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"x-config-tab/number\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"C09xVVTP\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"x-config-tab/number\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/x-config-tab/select-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-config-tab/select', 'Integration | Component | x config tab/select', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"rt3BIGvk\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"x-config-tab/select\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"qiAci3Y5\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"x-config-tab/select\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/x-config-tab/string-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-config-tab/string', 'Integration | Component | x config tab/string', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"39aPRcUR\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"x-config-tab/string\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"BSoXdoN6\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"x-config-tab/string\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/x-debug-item-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-debug-item', 'Integration | Component | x debug item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"zNd1APlE\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"x-debug-item\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"AWGxs2QN\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"x-debug-item\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/x-debug-tab-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-debug-tab', 'Integration | Component | x debug tab', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"wZmaWI4n\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"x-debug-tab\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"rWcZ/Zyo\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"x-debug-tab\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/x-editor-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-editor', 'Integration | Component | x editor', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"b/TWtmCF\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"x-editor\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"5h4D9zxU\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"x-editor\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/x-info-tab-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-info-tab', 'Integration | Component | x info tab', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Lxw0XoL4\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"x-info-tab\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"E4ozbdhT\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"x-info-tab\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/x-json-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-json', 'Integration | Component | x json', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"+W/B6Dxs\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"x-json\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"+wC1aACL\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"x-json\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/x-json2html-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-json2html', 'Integration | Component | x json2html', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"UINlc/9e\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"x-json2html\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"RzlOpqrO\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"x-json2html\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/integration/components/x-jsplumb-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-jsplumb', 'Integration | Component | x jsplumb', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"3DEA9CzC\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"x-jsplumb\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2cfDEPTR\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"x-jsplumb\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('exred/tests/test-helper', ['exred/app', '@ember/test-helpers', 'ember-qunit'], function (_app, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create({ autoboot: false }));\n\n  (0, _emberQunit.start)();\n});","define('exred/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/diagram-node-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/diagram-node-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/editor-flownav-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/editor-flownav-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/editor-flows-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/editor-flows-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/editor-nodelist-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/editor-nodelist-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/editor-sidetabs-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/editor-sidetabs-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/editor-toolbar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/editor-toolbar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-config-tab-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-config-tab-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-config-tab/codeblock-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-config-tab/codeblock-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-config-tab/filepicker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-config-tab/filepicker-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-config-tab/list-multiselect-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-config-tab/list-multiselect-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-config-tab/number-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-config-tab/number-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-config-tab/select-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-config-tab/select-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-config-tab/string-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-config-tab/string-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-debug-item-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-debug-item-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-debug-tab-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-debug-tab-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-editor-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-editor-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-info-tab-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-info-tab-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-json-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-json-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-json2html-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-json2html-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-jsplumb-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-jsplumb-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/app/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/app/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/debug-helpers-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/debug-helpers-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/connection-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/connection-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/flow-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/flow-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/node-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/node-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/service-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/app-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/app-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/app/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/app/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/auth-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/auth-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/auth/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/auth/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/auth/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/auth/register-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/node-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/node-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/global-state-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/global-state-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/phoenix-channels-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/phoenix-channels-test.js should pass ESLint\\n\\n');\n  });\n});","define('exred/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('exred/tests/unit/controllers/app/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:app/index', 'Unit | Controller | app/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('exred/tests/unit/initializers/debug-helpers-test', ['exred/initializers/debug-helpers', 'qunit', 'exred/tests/helpers/destroy-app'], function (_debugHelpers, _qunit, _destroyApp) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Initializer | debug helpers', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      Ember.run(function () {\n        _this.application = Ember.Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _destroyApp.default)(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _debugHelpers.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('exred/tests/unit/models/connection-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('connection', 'Unit | Model | connection', {\n    // Specify the other units that are required for this test.\n    needs: ['model:flow', 'model:node']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('exred/tests/unit/models/flow-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('flow', 'Unit | Model | flow', {\n    // Specify the other units that are required for this test.\n    needs: ['model:service', 'model:node', 'model:connection']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('exred/tests/unit/models/node-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('node', 'Unit | Model | node', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('exred/tests/unit/models/service-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('service', 'Unit | Model | service', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('exred/tests/unit/routes/app-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:app', 'Unit | Route | app', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('exred/tests/unit/routes/app/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:app/index', 'Unit | Route | app/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('exred/tests/unit/routes/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('exred/tests/unit/routes/auth-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:auth', 'Unit | Route | auth', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('exred/tests/unit/routes/auth/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:auth/login', 'Unit | Route | auth/login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('exred/tests/unit/routes/auth/register-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:auth/register', 'Unit | Route | auth/register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('exred/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('exred/tests/unit/serializers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('exred/tests/unit/serializers/node-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('node', 'Unit | Serializer | node', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:node']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('exred/tests/unit/services/global-state-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:global-state', 'Unit | Service | global state', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('exred/tests/unit/services/phoenix-channels-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:phoenix-channels', 'Unit | Service | phoenix channels', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('exred/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingshjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;","file":"tests.js"}